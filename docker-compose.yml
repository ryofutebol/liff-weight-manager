version: '3.5'
services:
  php-apache:
    build: ./docker/php-apache/
    # ドメインアクセスにするからもはやポートフォワーディングをする必要もない
    # NOTE: ngrokを使う際はコメントアウトを消してポート8080を指定
#    ports:
#      - "8080:8080"
    volumes:
      # プロジェクトディレクトリ自体を共有してapacheの方でDocumentRootを変える
      - .:/var/www/html
    environment:
      VIRTUAL_HOST: "myapp.local.localhost"
      CERT_NAME: "_wildcard.local.localhost" # これで_wildcard.local.localhost.crt と _wildcard.local.localhost.key が読み込まれる
      HTTPS_METHOD: "noredirect" # httpアクセスもしたい場合はこれでリダイレクトを無効にする
    networks:
      - myapp-network
      - local-network
    restart: always
  mysql:
    build: ./docker/mysql/
    volumes:
      # MySQLのデータディレクトリは永続化する
      - ./var/mysql:/var/lib/mysql
      # 初期データを投入する場合はSQLが格納されているdirを指定する
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    environment:
      MYSQL_ROOT_PASSWORD: "password"
     # MysqlWorkbench等のクライアントツールからつなげたい時だけ以下を有効にすれば良い
#    ports:
#      - 3316:3306
    # 明示的に stop がされない限り、終了ステータスに関係なく常に再起動が行われる
    restart: always
    networks:
      - myapp-network
  # ローカル環境なのでphpmyadminも有効にしておく
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    environment:
      # アプリと同様にドメインを付与すればphpmyadminも使えるようになる
      VIRTUAL_HOST: "myapp-db.local.localhost"
      CERT_NAME: "_wildcard.local.localhost" # _wildcard.local.localhost.crt と _wildcard.local.localhost.key が読み込まれる
      PMA_HOST: 'mysql'
      PMA_USER: 'root'
      PMA_PASSWORD: 'password'
    networks:
      # アプリと同様に二つのネットワークにつなぐ
      - myapp-network
      - local-network
## ここで使用するネットワークの宣言
networks:
  # コンテナ内で通信する為のネットワーク
  myapp-network:
    name: myapp-network
  # リバースプロキシからアクセスされる為のネットワーク
  local-network:
    external: true  # 外部ネットワークであることを宣言をしておけばdocker-compose downした時に消されない
    name: local-network